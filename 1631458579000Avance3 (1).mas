//Main Program
            ORG 100  / Initial position in memory where the program starts
           	Load Tamaño_arreglo / Load of the total number of numbers that are 50
           	Subt A    / We subtract A from the total
            	Store B /  We store it in variable B
        	Jump  Subrutina1 / We call subroutine 1, to obtain the MAX, MIN and Median values
END_Subrutina1, Load RPM / We finish the subroutine and load the data reading so that it displays the minimum value within the data set
            	Add A
           	Store X
            	LoadI X  / We use the value of X as the address of the value to input
	Output  / We display the minimum value of the data set
           	Load RPM / We load the data reading so that it displays the maximum value within the data set
	Add Tamaño_arreglo  / We add the size of the array
           	Store X  / We save it in X
            	LoadI X  / We use the value of X as the address of the value to input
            	Output / We display the maximum value of the data set
         Load RPM  /Hacemos load de la lectura de datos para que despliegue la mediana dentro del conjunto de datos
	Add Mediana 
            	Store X
           	LoadI X
            	Output /We display the median of the data set
            	Jump Subrutina2  /Jump to subroutine 2
END_Subrutina2, Jump END  /Subroutine 2 ends and we jump to the END to execute the HALT and stop the program

/Record of revolutions per minute that are recorded in an excel file, and are saved in MARIE's memory and then proceed to be read.
/Subrutinas
Subrutina1,	Load B / do load of B
SKIPCOND  800 / use skipcond 800 in case the AC gives a positive result and if it is fulfilled, it executes the End_Subroutine1
             Jump END_Subrutina1
             Load RPM  / We save in RPM
             Add A  / Add A
             Store Apuntador  / Save in Apuntador
             Clear  / AC equals 0 
Store C  / Save in C 
/ FOR
FOR,	Load B  / 
             Subt C  / Subtract C to AC
         SKIPCOND    800 / use skipcond 800 in case the AC gives a positive result and if it is fulfilled, it executes the End_for and exits the cycle
             Jump END_FOR / End For
	Load Apuntador /Load the pointer
             Add A /Add the value to A  
             Store Auxiliar1 / store the value of A in Auxiliary1
             LoadI Auxiliar1  / use the value of Auxiliary1 as the address of the value to be input
	Store Auxiliar1 
             Loadl Apuntador /
             Subt Auxiliar1 /Subtract Auxiliar to Apuntador
	SKIPCOND	800 / use skipcond 800 in case the AC gives a positive result and if it is fulfilled, it executes the End_for and exits the cycle
             Jump END_IF 
IF,          Load Apuntador / Load the pointer
             Add A / 
             Store X / Save in X
             LoadI Apuntador  / use the value of Pointer as the address of the value to input
	Store Y / 
             LoadI X / 
             StoreI Apuntador / use the value of Pointer as the address of the value to store
             Load Y /
             StoreI X   / Use the value of X as direction to save the value 

END_IF,     Load Apuntador / If the condition is not met, load the pointer
	Add A 
	Store Apuntador
	Load C 
               Add A / Add C to  A
	  Store C / 
        	  Jump For / 
END_FOR, Load B / End the cycle for and load the B
        	  Subt A / Subtract the value of A from B
	  Store B / 
        	 Jump Subrutina1 / Back to Subrutina1

PRINT, Load Tamaño_arreglo /load the size of the array
          Subt B / subtract the array size from B
          SKIPCOND 800  / use skipcond 800 in case the AC gives a positive result and if it is fulfilled, it executes the End_for and exits the cycle
          Jump END  
          LoadI Apuntador / use the value of Pointer as the address of the value to input
          Output / print the value of the pointer
          Load Apuntador / load the pointer
          Add A / 
          Store Apuntador / 
           Load B / 
           Add A /
          Store B / 
          Jump Print / 
		       
Subrutina2, Clear / Limpiamos el AC
            Store B / Lo guardamos en B
            Load RPM /  Cargamos el RPM
            Add A / Agregamos el valor de A a RPM
            Store Apuntador / Lo guardamos en el apuntador

FOR2, Load Tamaño_arreglo /Cargamos el tamaño del arreglo de datos
	Subt B / Le restamos B 
            Skipcond 800 / Usamos skipcond 800 por si el AC da resultado positivo y si se cumple ejecuta el END_FOR2 y salga del ciclo
            Jump END_FOR2   / Saltamos al fin del ciclo
            LoadI Apuntador   / Cargamos el apuntador
            Add Acumulador   / Le agregamos el acumalor a apuntador
            Store Acumulador   / Lo guardamos en el acumulador
            Load Apuntador   / Cargamos el apuntador
           Add A   / Agregamos el valor de A en el apuntador
           Store Apuntador   / Lo almacenamos en el Apuntador
            Load B   / Cargamos B
            Add A   / Agrgamos el valor de A a B
            Store B   / Almacenamos en B
            Jump FOR2   / Saltamos al for2
END_FOR2, Clear   / Limpiamos la memoria 
	Store B   / Almacenamos B

LOOP, Load Acumulador   / Cargamos el acumulador
            Subt Tamaño_arreglo   / Restamos el tamaño del arreglo al acumulador
            SKIPCOND 800  / Usamos skipcond 800 por si el AC da resultado positivo y si se cumple ejecuta el END_FOR2 y salga del ciclo
            Jump END_loop / Saltamos al end loop
            Load Acum / Cargamos el acumulador
            Subt Tamaño_arreglo / Restamos el tamaño del arreglo al acumulador
            Store Acum /Almacenamos en el acumulador
            Load B / Cargamos B
            Add A / Agregamos A a B
            Store B / Almacenamos en B
            Jump LOOP / Birncamos al loop
END_LOOP,   Load B / Cargamos el valor de B
            Output / Salida del valor B
            Jump END_Subrutina2  / Brincamos a la subrutina 2 
        
END, 	Halt
RPM, 	HEX 115 		
	Dec 1505 	/ RPM Reading 1 
        	Dec 1928	/ RPM Reading 2  
        	Dec 1463	/ RPM Reading 3  
        	Dec 1705	/ RPM Reading 4  
        	Dec 1707	/ RPM Reading 5 
        	DEC 1899	/ RPM Reading 6
        	DEC 1942	/ RPM Reading 7
       	DEC 520	/ RPM Reading 8
        	DEC 1730	/ RPM Reading 9
        	DEC 1104	/ RPM Reading 10
        	DEC 887	/ RPM Reading 11
        	DEC 786	/ RPM Reading 12
        	DEC 1210	/ RPM Reading 13
        	DEC 1676	/ RPM Reading 14
        	DEC 717	/ RPM Reading 15
       	DEC 1827	/ RPM Reading 16
        	DEC 742 	/ RPM Reading 17
        	DEC 1270	/ RPM Reading 18
        	DEC 1436	/ RPM Reading 19
        	DEC 538	/ RPM Reading 20
        	DEC 1603	/ RPM Reading 21
        	DEC 1415	/ RPM Reading 22
        	DEC 1450	/ RPM Reading 23
        	DEC 1978	/ RPM Reading 24
        	DEC 1592	/ RPM Reading 25
        	DEC 1300	/ RPM Reading 26
        	DEC 965	/ RPM Reading 27
        	DEC 733	/ RPM Reading 28
        	DEC 1933	/ RPM Reading 29
        	DEC 799	/ RPM Reading 30
        	DEC 1817	/ RPM Reading 31
        	DEC 1290	/ RPM Reading 32
        	DEC 1009	/ RPM Reading 33
        	DEC 715	/ RPM Reading 34
        	DEC 1758	/ RPM Reading 35
        	DEC 519	/ RPM Reading 36
        	DEC 582	/ RPM Reading 37
        	DEC 963	/ RPM Reading 38
        	DEC 1214	/ RPM Reading 39
        	DEC 1198	/ RPM Reading 40
        	DEC 688	/ RPM Reading 41
        	DEC 1567	/ RPM Reading 42
        	DEC 1093	/ RPM Reading 43
        	DEC 1017	/ RPM Reading 44
        	DEC 1932	/ RPM Reading 45
        	DEC 1857	/ RPM Reading 46
        	DEC 1201	/ RPM Reading 47
        	DEC 909	/ RPM Reading 48
        	Dec 889	/ RPM Reading 49 
        	Dec 1421	/ RPM Reading 50 


Auxiliar1, 		DEC 0
Auxiliar2, 		DEC 0
Apuntador,		DEC 0
A,			DEC 1
B,			DEC 0
C,			DEC 0
X, 			DEC 0
Y,			DEC 0
Tamaño_arreglo,	DEC 50
Mediana,		DEC 25
Acumulador, 		DEC 0

        
